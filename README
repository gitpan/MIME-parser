****
**** MIME-parser has been uploaded to the CPAN under my author
**** id (ERYQ) and name (Eryq).
****

NAME

    MIME-parser - family of MIME:: modules for parsing MIME messages

ALPHA-RELEASE WARNING

    THIS CODE IS IN AN EVALUATION PHASE UNTIL 1 AUGUST 1996.
    Depending on any comments/complaints received before this cutoff 
    date, the interface *may* change in a non-backwards-compatible 
    manner.

DESCRIPTION

    MIME-parser is a collection of Perl5 MIME:: modules for parsing 
    and decoding single- or multipart (even nested multipart) MIME 
    messages. 

SYNOPSIS

    You start by creating an instance of MIME::Parser, and setting up
    certain parsing parameters: what directory to save extracted files 
    to, how to name the files, etc.

    You then give that instance a readable filehandle on which waits a
    MIME message.  If all goes well, you will get back a MIME::Entity
    object, consisting of a MIME::Head (which holds the MIME header 
    data) and the name of the file in which the (decoded) body has been 
    stored.

    If the original message was a multipart document, the MIME::Entity
    object will have a non-empty list of "parts", each of which is in 
    turn a MIME::Entity (which might also be a multipart entity, etc, 
    etc...).

    Internally, MIME::Parser asks for instances of MIME::Decoder
    whenever it needs to decode an encoded file.  MIME::Decoder has
    a mapping from supported encodings (e.g., 'base64') to classes
    whose instances can decode them.  You can add to this mapping 
    to try out new/experiment encodings.  You can also use 
    MIME::Decoder by itself.

MODULE SPECIFICATIONS

    Module      DSLI    Description                               Info
    ----------  ----    ----------------------------------------  ----
    MIME::
    ::Decoder   adpO    OO interface for decoding MIME messages   ERYQ
    ::Entity    adpO    An extracted and decoded MIME entity      ERYQ
    ::Head      adpO    A parsed MIME header                      ERYQ
    ::Parser    adpO    Parses streams to create MIME entities    ERYQ

CONTENTS OF THE PACKAGE

    ./MIME/*.pm         the MIME-parser classes
    ./Makefile.PL       the input to MakeMaker
    ./COPYING           terms and conditions for copying/using the software
    ./README            this file
    ./docs/             HTMLized documentation
    ./etc/              convenient copies of other modules you may need
    ./testin/           files you can use for testing (as in "make test")
    ./testout/          the output of "make test"

REQUIREMENTS

    Obtain and install the following modules from the CPAN:

         MIME::QuotedPrint 
         MIME::Base64

    For your convenience, possibly-old copies are provided in the ./etc
    directory, of the distribution, but they are NOT installed for you 
    during the installation procedure.

INSTALLATION

    Pretty simple:

        1. Gunzip and de-tar the distribution, and cd to the top level.
        2. Type:      perl Makefile.PL
        3. Type:      make                    # this step is optional
        4. Type:      make test               # this step is optional
        5. Type:      make install

    Other interesting targets in the Makefile are:

        make config     # to check if the Makefile is up-to-date
        make clean      # delete local temp files (Makefile gets renamed)
        make realclean  # delete derived files (including ./blib)


MAJOR PLANS FOR THE FUTURE

	* Tighter coupling with Mail::Internet and friends.

	* Add option to parse message/rfc822 as a pseduo multipart document.

	* Dress up mimedump and mimeexplode utilities to take cmd line options
	  for directory, environment vars (MIMEDUMP_OUTPUT, etc.).

	* Allow you to specify a cutoff() method that will determine whether
	  a decoded message is stored on disk or in a scalar.  Default will
	  probably keep messages <10-20K in core.  In such a case, the
	  body() method will return undef; we'll need a new way of accessing
	  the data transparently.  Too bad setvbuf() isn't guaranteed...
	  we could just "open" a filehandle on the scalar... hmmm... maybe
	  I'll provide an open_body() for those lucky few that have it...  :-)

 
CHANGE LOG
	1.12	Fixed bugs in parser where CRLF-terminated lines were 
		blowing out the handling of preambles/epilogues.
		Thanks to Russell Sutherland for reporting this bug.

		Fixed idiotic is_multipart() bug.  Thanks to Andreas Koenig 
		for noticing it.

		Added untested binmode() calls to parser for DOS, etc.
		systems.  No idea if this will work...

		Reorganized the output_path() methods to allow easy use
		of inheritance, as per Achim Bohnet's suggestion.

		Changed MIME::Head to report mime_type more accurately.

		POSIX module no longer loaded by Parser if perl >= 5.002.
		Hey, 5.001'ers: let me know if this breaks stuff, okay?

		Added unsupported ./examples directory.

	1.11	Converted over to using Makefile.PL.  Thanks to
		Andreas Koenig for the much-needed kick in the pants...

		Added t/*.t files for testing.  Eeeeeeeeeeeh...it's a start.

		Fixed bug in default parsing routine for generating 
		output paths; it was warning about evil filenames if
		there simply *were* no recommended filenames.  D'oh!

		Fixed redefined parts() method in Entity.

		Fixed bugs in Head where field name wasn't being case folded.

	1.10	A typo was causing the epilogue of an inner multipart
		message to be swallowed to the end of the OUTER multipart
		message; this has now been fixed.  Thanks to Starovoitov 
		Igor for reporting this bug.

		A bad regexp for parameter names was causing 
		some parameters to be parsed incorrectly; this has also
		been fixed.  Thanks again to Starovoitov Igor for reporting 
		this bug.
	
		It is now possible to get full control of the filenaming
		algorithm before output files are generated, and the default
		algorithm is safer.  Thanks to Laurent Amon for pointing
		out the problems, and suggesting some solutions. 

		Fixed illegal "simple" multipart test file.  D'OH!

	1.9	No changes: 1.8 failed CPAN registration

	1.8.	Fixed incompatibility with 5.001 and FileHandle::new_tmpfile
		Added COPYING file, and improved README.

TERMS AND CONDITIONS

    Copyright (c) 1996 by Eryq.  All rights reserved.  This program is free
    software; you can redistribute it and/or modify it under the same terms as
    Perl itself. 

    See the COPYING file in the distribution for details.

SEE ALSO

    The MIME format is documented in RFC 1521.  
    The MIME header format is documented in RFC 822.

AUTHOR

    Eryq, eryq@rhine.gsfc.nasa.gov
    28 April 1996


